package main

import (
	"context"
	"github.com/pkg/errors"
	"github.com/slavik22/blogRestApi"
	"github.com/slavik22/blogRestApi/controller"
	"github.com/slavik22/blogRestApi/lib/validator"
	"github.com/slavik22/blogRestApi/repository"
	"github.com/slavik22/blogRestApi/service"
	echoSwagger "github.com/swaggo/echo-swagger"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"log"

	_ "github.com/swaggo/echo-swagger/example/docs" // docs is generated by Swag CLI, you have to import it
)

//	@title			Swagger Example API
//	@version		1.0
//	@description	This is a sample blog Rest Api.
//	@termsOfService	http://swagger.io/terms/

//	@contact.name	API Support
//	@contact.url	http://www.swagger.io/support
//	@contact.email	support@swagger.io

//	@license.name	Apache 2.0
//	@license.url	http://www.apache.org/licenses/LICENSE-2.0.html
//
// @host		localhost:8080
// @BasePath	/api/v1
func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
}

func run() error {
	ctx := context.Background()

	cfg, err := blogRestApi.Get(".")

	db, err := gorm.Open(mysql.Open(cfg.DBSource))

	userRepo := repository.NewUserMysqlRepo(db)
	commentRepo := repository.NewCommentMysqlRepo(db)
	postRepo := repository.NewPostMysqlRepo(db)

	store, err := repository.New(ctx, db, userRepo, postRepo, commentRepo)

	if err != nil {
		return errors.Wrap(err, "repository.New failed")
	}

	serviceManager, err := service.NewManager(ctx, store)
	if err != nil {
		return errors.Wrap(err, "manager.New failed")
	}

	userController := controller.NewUserController(ctx, serviceManager)
	postController := controller.NewUPostController(ctx, serviceManager)
	commentController := controller.NewUCommentController(ctx, serviceManager)

	e := echo.New()
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	e.Validator = validator.NewValidator()

	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	v1 := e.Group("api/v1")

	auth := v1.Group("/auth")
	{
		auth.POST("/sign-up", userController.SignUp)
		auth.POST("/sign-in", userController.SignIn)
	}

	posts := v1.Group("/posts", controller.UserIdentity)
	{
		posts.GET("/", postController.GetAllPosts)
		posts.GET("/:id", postController.GetPostById)
		posts.POST("/", postController.CreatePost)
		posts.DELETE("/:id", postController.DeletePost)
		posts.PUT("/:id", postController.UpdatePost)
	}

	comments := v1.Group("/comments", controller.UserIdentity)
	{
		comments.GET("/", commentController.GetAllComments)
		comments.GET("/:id", commentController.GetCommentById)
		comments.POST("/", commentController.CreateComment)
		comments.DELETE("/:id", commentController.DeleteComment)
		comments.PUT("/:id", commentController.UpdateComment)
	}

	s := &http.Server{
		Addr:         cfg.HTTPAddr,
		ReadTimeout:  30 * time.Minute,
		WriteTimeout: 30 * time.Minute,
	}
	e.Logger.Fatal(e.StartServer(s))

	return nil
}
