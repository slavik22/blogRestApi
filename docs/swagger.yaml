basePath: /api/v1
definitions:
  controller.signInOutput:
    properties:
      token:
        type: string
    type: object
  model.Comment:
    properties:
      body:
        type: string
      id:
        type: integer
      postId:
        type: integer
      title:
        type: string
    type: object
  model.Post:
    properties:
      body:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      title:
        type: string
      userId:
        type: integer
    type: object
  model.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample blog Rest Api.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /api/v1/Comments:
    delete:
      consumes:
      - application/json
      description: delete model.Comment
      operationId: delete-Comment
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Delete Comment
      tags:
      - Comment
    get:
      consumes:
      - application/json
      description: get all Comments
      operationId: get-all-Comments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Comment'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get All Comments
      tags:
      - Comments
    post:
      consumes:
      - application/json
      description: create model.Comment
      operationId: create-Comment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: uint
      security:
      - ApiKeyAuth: []
      summary: Create Comment
      tags:
      - Comment
    put:
      consumes:
      - application/json
      description: update model.Comment
      operationId: update-Comment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Comment'
      security:
      - ApiKeyAuth: []
      summary: Update Comment
      tags:
      - Comment
  /api/v1/Comments/:id:
    get:
      consumes:
      - application/json
      description: get model.Comment by id
      operationId: get-Comment-by-id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Comment'
      security:
      - ApiKeyAuth: []
      summary: Get Comment By ID
      tags:
      - Comments
  /api/v1/auth/sign-in:
    post:
      consumes:
      - application/json
      description: Login new user and returns token
      operationId: SignIn
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.signInOutput'
      summary: SignIn user
      tags:
      - User
  /api/v1/auth/sign-up:
    post:
      consumes:
      - application/json
      description: |-
        Create new user
        create model.Post
      operationId: SignUp
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: SignUp user
      tags:
      - User
  /api/v1/posts:
    delete:
      consumes:
      - application/json
      description: delete model.Post
      operationId: delete-Post
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Delete Post
      tags:
      - Post
    get:
      consumes:
      - application/json
      description: get all Posts
      operationId: get-all-Posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Post'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get All Posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: |-
        create Post
        create model.Post
      operationId: create-Post
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: uint
      security:
      - ApiKeyAuth: []
      summary: Create Post
      tags:
      - Post
    put:
      consumes:
      - application/json
      description: update model.Post
      operationId: update-Post
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
      security:
      - ApiKeyAuth: []
      summary: Update Post
      tags:
      - Post
  /api/v1/posts/:id:
    get:
      consumes:
      - application/json
      description: get model.Post by id
      operationId: get-Post-by-id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
      security:
      - ApiKeyAuth: []
      summary: Get Post By ID
      tags:
      - Posts
swagger: "2.0"
